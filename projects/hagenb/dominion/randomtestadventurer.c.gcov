        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***************************************************************************************
        -:    2:** Author: Brook Hagen
        -:    3:** Date: 10/22/17
        -:    4:** Course: CS362 SEII
        -:    5:** Description: random test - Adventurer Card - for Assignment #4
        -:    6:**	int adventurerCard(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int z) 
        -:    7:
        -:    8:**	Include the following in your makefile:
        -:    9:**	
        -:   10:**	randomtestadventurer: randomtestadventurer.c dominion.o rngs.o
        -:   11:**		gcc -o randomtestadventurer -g randomtestadventurer.c dominion.o rngs.o $(CFLAGS)
        -:   12:***************************************************************************************/
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include <string.h>
        -:   17:#include <stdio.h>
        -:   18:#include <assert.h>
        -:   19:#include "rngs.h"
        -:   20:#include <stdlib.h>
        -:   21:#include <time.h>
        -:   22:
        -:   23:#define TESTCARD "adventurer"
        -:   24:
function pass called 103000 returned 100% blocks executed 100%
   103000:   25:int pass(int actual, int result)
        -:   26:{
   103000:   27:	if (actual == result)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:   28:	{
        -:   29:		//printf("PASS\n");
     2629:   30:		return 1;
        -:   31:	}
        -:   32:	else
        -:   33:		//printf("FAIL\n");
   100371:   34:		return 0;
        -:   35:}
        -:   36:
        -:   37:/************************************************************************************
        -:   38:  Function: getNumPlayers
        -:   39:  Parameters: none
        -:   40:  Returns: int n, the number of players for the game
        -:   41:  Description:
        -:   42:  Calling the getNumPlayers() function will select the number of players for the
        -:   43:  game, at random, between 2 and 4.
        -:   44:  ************************************************************************************/
function getNumPlayers called 101001 returned 100% blocks executed 100%
   101001:   45:int getNumPlayers()
        -:   46:{
        -:   47:	//randomly produce number of players between 2 and 4
   101001:   48:	int n = (rand() % 3) + 2;
call    0 returned 100%
   101001:   49:	return n;
        -:   50:}
        -:   51:
        -:   52:/************************************************************************************
        -:   53:  Function: getSeed
        -:   54:  Parameters: none
        -:   55:  Returns: int s
        -:   56:  Description:
        -:   57:  Calling the getSeed() function will select a random number between 1 and 5000,
        -:   58:  which will be the seed number for the initializeGame() function.
        -:   59:  ************************************************************************************/
function getSeed called 101001 returned 100% blocks executed 100%
   101001:   60:int getSeed()
        -:   61:{
        -:   62:	//randomly produce seed number between 1 and 5000.
   101001:   63:	int s = rand() % 5001;
call    0 returned 100%
   101001:   64:	return s;
        -:   65:}
        -:   66:
        -:   67:/************************************************************************************
        -:   68:  Function: getThisPlayer(int numPlayer)
        -:   69:  Parameters: int number of players
        -:   70:  Returns: int p - the player of concern (thisPlayer)
        -:   71:  Description:
        -:   72:  Calling the getThisPlayer() function will select a random player from the current,
        -:   73:  number of players, which will be used to verify the discard function.
        -:   74:  ************************************************************************************/
function getThisPlayer called 101001 returned 100% blocks executed 100%
   101001:   75:int getThisPlayer(int n)
        -:   76:{
        -:   77:	//randomly select player based on number of players
   101001:   78:	int p = (rand() % n);
call    0 returned 100%
   101001:   79:	return p;
        -:   80:}
        -:   81:
        -:   82:/************************************************************************************
        -:   83:  Function: getHandPos
        -:   84:  Parameters: none
        -:   85:  Returns: int h
        -:   86:  Description:
        -:   87:  Calling the getHandPos() function will select a random number between 0 and 4,
        -:   88:  which will represent the hand position of a particular card. Note that a hand has
        -:   89:  between 1 and 5 cards at positions 0 - 4.
        -:   90:************************************************************************************/
function getHandPos called 101000 returned 100% blocks executed 100%
   101000:   91:int getHandPos()
        -:   92:{
        -:   93:	//randomly produce seed number between 0 and 10.
   101000:   94:	int h = rand() % 5;
call    0 returned 100%
   101000:   95:	return h;
        -:   96:}
        -:   97:
        -:   98:/************************************************************************************
        -:   99:  Function: getBonus
        -:  100:  Parameters: none
        -:  101:  Returns: int b
        -:  102:  Description:
        -:  103:  Calling the getBonus() function will select a random number between 1 and 10,
        -:  104:  which will represent coin bonus.
        -:  105:  ************************************************************************************/
function getBonus called 101000 returned 100% blocks executed 100%
   101000:  106:int getBonus()
        -:  107:{
        -:  108:	//randomly produce seed number between 0 and 10.
   101000:  109:	int b = rand() % 11;
call    0 returned 100%
   101000:  110:	return b;
        -:  111:}
        -:  112:
        -:  113:/************************************************************************************
        -:  114:  Function: getGold
        -:  115:  Parameters: none
        -:  116:  Returns: int g
        -:  117:  Description:
        -:  118:  Calling the getBonus() function will select a random number between 0 and 15,
        -:  119:  which will represent gold count.
        -:  120:  ************************************************************************************/
        -:  121:// int getGold()
        -:  122:// {
        -:  123:// 	//randomly produce seed number between 0 and 15.
        -:  124:// 	int g = rand() % 16;
        -:  125:// 	return g;
        -:  126:// }
        -:  127:
        -:  128:// ***********************************************************************************
        -:  129://   Function: getSilver
        -:  130://   Parameters: none
        -:  131://   Returns: int ag
        -:  132://   Description:
        -:  133://   Calling the getBonus() function will select a random number between 0 and 20,
        -:  134://   which will represent gold count.
        -:  135://   ***********************************************************************************
        -:  136:// int getSilver()
        -:  137:// {
        -:  138:// 	//randomly produce seed number between 0 and 20.
        -:  139:// 	int ag = rand() % 21;
        -:  140:// 	return ag;
        -:  141:// }
        -:  142:
function main called 1 returned 100% blocks executed 95%
        1:  143:int main() 
        -:  144:{
        1:  145:	srand(time(NULL));				//get random seed every run
call    0 returned 100%
call    1 returned 100%
        -:  146:	int i;						//counters
        -:  147:	int golds, silvers, coppers;	//coin counters
        -:  148:	int testGolds, testSilvers, testCoppers;
        -:  149:	int seed;
        1:  150:	int num_tests = 10; //10000;			//run the test 10,000 times
        -:  151:	int numPlayers;
        -:  152:	int thisPlayer;
        -:  153:	//int bonus = getBonus();
        -:  154:
        1:  155:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:  156:	struct gameState G, testG;
        1:  157:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:  158:			sea_hag, tribute, smithy, council_room};
        -:  159:	
        -:  160:	// initialize a game state and player cards
        1:  161:	numPlayers = getNumPlayers();
call    0 returned 100%
        1:  162:	seed = getSeed();
call    0 returned 100%
        1:  163:	thisPlayer = getThisPlayer(numPlayers);
call    0 returned 100%
        1:  164:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:  165:
        -:  166:	//time the tests
        -:  167:	clock_t t1, t2, totalT;
        -:  168:
        1:  169:	printf("----------------- Random Test for Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:  170:
        -:  171:	//start timers for test 1 and both tests together
        1:  172:	t1 = clock();
call    0 returned 100%
        1:  173:	totalT = clock();
call    0 returned 100%
        -:  174:
   100001:  175:	for (i = 0; i < num_tests * 10000; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  176:	{
        -:  177:		// ----------- TEST 1: verify that two cards are drawn --------------
   100000:  178:		if (i == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  179:			printf("TEST 1: Verify that two cards are drawn and added to hand\n\n");
call    0 returned 100%
        -:  180:
   100000:  181:		numPlayers = getNumPlayers();
call    0 returned 100%
   100000:  182:		seed = getSeed();
call    0 returned 100%
   100000:  183:		thisPlayer = getThisPlayer(numPlayers);
call    0 returned 100%
   100000:  184:		bonus = getBonus();
call    0 returned 100%
   100000:  185:		handPos = getHandPos();
call    0 returned 100%
        -:  186:
        -:  187:		// copy the game state to a test case
   100000:  188:		memcpy(&testG, &G, sizeof(struct gameState));
        -:  189:		
        -:  190:		//adventurerCard(&G, thisPlayer, 2, 1, 1);	
   100000:  191:		cardEffect(steward, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:  192:
        -:  193:		// //G.drawntreasure = 2;
        -:  194:		// G.handCount[thisPlayer] =+ 2;
        -:  195:
        -:  196:		
   100000:  197:		if (pass(testG.handCount[thisPlayer], G.handCount[thisPlayer]==0))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  198:			printf("\tTest %d failed: Hand count = %d, expected %d.", i, testG.handCount[thisPlayer], G.handCount[thisPlayer]);
call    0 never executed
        -:  199:		//printf("Number of players is %d, seed is %d, thisPlayer is %d, bonus is %d\n", numPlayers, seed, thisPlayer, bonus);
        -:  200:	}
        -:  201:
        1:  202:	t1 = clock() - t1;
call    0 returned 100%
        1:  203:	double t1_taken = ((double)t1)/CLOCKS_PER_SEC; 	//Time in seconds
        1:  204:	printf("\n Test 1 time: %f.\n", t1_taken);
call    0 returned 100%
        -:  205:
        1:  206:	printf("\n\t>> Test #1 is COMPLETE. <<\n");
call    0 returned 100%
        -:  207:
        -:  208:	//start timer for test #2
        1:  209:	t2 = clock();
call    0 returned 100%
        -:  210:
        -:  211:	//initializeGame(numPlayers, k, seed, &G);
        -:  212:
     1001:  213:	for (i = 0; i < num_tests * 100; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  214:	{
        -:  215:		// // ----------- TEST 2: verify treasure count --------------
        -:  216:
     1000:  217:		if (i == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  218:			printf("\nTEST 2: Verify that treasure count is equal.\n");
call    0 returned 100%
        -:  219:
     1000:  220:		numPlayers = getNumPlayers();
call    0 returned 100%
     1000:  221:		seed = getSeed();
call    0 returned 100%
     1000:  222:		thisPlayer = getThisPlayer(numPlayers);
call    0 returned 100%
     1000:  223:		bonus = getBonus();
call    0 returned 100%
     1000:  224:		handPos = getHandPos();
call    0 returned 100%
        -:  225:
        -:  226:		// copy the game state to a test case
     1000:  227:		memcpy(&testG, &G, sizeof(struct gameState));
        -:  228:		
     1000:  229:		cardEffect(steward, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:  230:
     1000:  231:		golds = fullDeckCount(thisPlayer, 6, &G);
call    0 returned 100%
     1000:  232:		silvers = fullDeckCount(thisPlayer, 5, &G);
call    0 returned 100%
     1000:  233:		coppers = fullDeckCount(thisPlayer, 4, &G);
call    0 returned 100%
        -:  234:
     1000:  235:		testGolds = fullDeckCount(thisPlayer, 6, &testG);
call    0 returned 100%
     1000:  236:		testSilvers = fullDeckCount(thisPlayer, 5, &testG);
call    0 returned 100%
     1000:  237:		testCoppers = fullDeckCount(thisPlayer, 4, &testG);
call    0 returned 100%
        -:  238:
     1000:  239:		if (pass(golds, testGolds) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  240:			printf("Test %d failed: Golds = %d, expected = %d\n", i, golds, testGolds);
call    0 never executed
     1000:  241:		if (pass(silvers, testSilvers) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  242:			printf("Test %d failed: Silvers = %d, expected = %d\n", i, silvers, testSilvers);
call    0 never executed
     1000:  243:		if (pass(coppers, testCoppers) == 0)
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
      371:  244:			printf("Test %d failed: Coppers = %d, expected = %d\n", i + 1, coppers, testCoppers);
call    0 returned 100%
        -:  245:		
        -:  246:	}
        -:  247:	
        1:  248:	t2 = clock() - t2;
call    0 returned 100%
        1:  249:	double t2_taken = ((double)t2)/CLOCKS_PER_SEC; 	//Time in seconds
        1:  250:	printf("\n Test 2 time: %f.\n", t2_taken);
call    0 returned 100%
        -:  251:
        1:  252:	printf("\n\t >> Test #2 is COMPLETE. << \n");
call    0 returned 100%
        -:  253:
        -:  254:	//get the execution time and print it:
        1:  255:	totalT = clock() - totalT;
call    0 returned 100%
        1:  256:	double total_taken = ((double)totalT)/CLOCKS_PER_SEC; 	//Time in seconds
        1:  257:	printf("\n Total testing time: %f.\n", total_taken);
call    0 returned 100%
        -:  258:	
        1:  259:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  260:
        1:  261:	return 0;
        -:  262:}
