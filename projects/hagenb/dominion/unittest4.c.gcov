        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***************************************************************************************
        -:    2:** Author: Brook Hagen
        -:    3:** Date: 10/22/17
        -:    4:** Course: CS362 SEII
        -:    5:** Description: Unit test #4 - getCost(int) for Assignment #3
        -:    6:
        -:    7:**	Include the following in your makefile:
        -:    8:**	
        -:    9:**	unittest1: unittest4.c dominion.o rngs.o
        -:   10:**		gcc -o unittest4 -g unittest4.c dominion.o rngs.o $(CFLAGS)
        -:   11:***************************************************************************************/
        -:   12:
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "interface.h"
        -:   16:#include "rngs.h"
        -:   17:#include <assert.h>
        -:   18:#include <string.h>
        -:   19:#include <stdio.h>
        -:   20:#include <stdlib.h>
        -:   21:
        -:   22://set PRINT_OUT to 0 to remove print statements from output
        -:   23:#define PRINT_OUT 1
        -:   24:
        -:   25://Test Method for getCost():
        -:   26://	Using switch statement to mirror the actual function.
function main called 1 returned 100% blocks executed 78%
        1:   27:int main() {
        -:   28:	int i;					// counter which represents the card number
        -:   29:	int price;				// cost of each card, as returned by getCost()
        -:   30:
        1:   31:	printf("TESTING getCost():\n");
call    0 returned 100%
        -:   32:
        -:   33:
        -:   34:	//16Oct17 06:55
        -:   35:	//r = initializeGame(numPlayer, k, seed, &G);
        -:   36:	#if (PRINT_OUT ==1)
        -:   37:
        1:   38:		printf("Test 1: Testing card numbers outside of range, eg, < 0 and > 26.\n");
call    0 returned 100%
        4:   39:		for (i = -3; i < 0; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   40:		{
        3:   41:			price = getCost(i);
call    0 returned 100%
        3:   42:			printf("\tgetCost() for %d = %d, expected %d\n", i, price, -1);
call    0 returned 100%
        3:   43:			assert(price == -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   44:		}
        4:   45:		for (i = 27; i < 30; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   46:		{
        3:   47:			price = getCost(i);
call    0 returned 100%
        3:   48:			printf("\tgetCost() for %d = %d, expected %d\n", i, price, -1);
call    0 returned 100%
        3:   49:			assert(price == -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   50:		}
        -:   51:
        -:   52:	#endif
        -:   53:
        -:   54:
        -:   55:	#if (PRINT_OUT ==1)
        -:   56:
        1:   57:		printf("\nTest #2: Testing values of each card, hard-coded vs. return value from getCost().\n");
call    0 returned 100%
       28:   58:		for (i = 0; i < 27; i++) 
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   59:		{
        -:   60:
       27:   61:			price = getCost(i);
call    0 returned 100%
        -:   62:
       27:   63:			switch(i) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:   64:			{
        -:   65:				case curse:
        1:   66:					printf("\tgetCost() = %d, expected %d\n", price, 0);
call    0 returned 100%
        1:   67:					assert(price == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   68:					break;
        -:   69:
        -:   70:				case estate:
        1:   71:					printf("\tgetCost() = %d, expected %d\n", price, 2);
call    0 returned 100%
        1:   72:					assert(price == 2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   73:					break;
        -:   74:
        -:   75:				case duchy:
        1:   76:					printf("\tgetCost() = %d, expected %d\n", price, 5);
call    0 returned 100%
        1:   77:					assert(price == 5);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   78:					break;
        -:   79:
        -:   80:				case province:
        1:   81:					printf("\tgetCost() = %d, expected %d\n", price, 8);
call    0 returned 100%
        1:   82:					assert(price == 8);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   83:					break;
        -:   84:
        -:   85:				case copper:
        1:   86:					printf("\tgetCost() = %d, expected %d\n", price, 0);
call    0 returned 100%
        1:   87:					assert(price == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   88:					break;
        -:   89:
        -:   90:				case silver:
        1:   91:					printf("\tgetCost() = %d, expected %d\n", price, 3);
call    0 returned 100%
        1:   92:					assert(price == 3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   93:					break;
        -:   94:
        -:   95:				case gold:
        1:   96:					printf("\tgetCost() = %d, expected %d\n", price, 6);
call    0 returned 100%
        1:   97:					assert(price == 6);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   98:					break;
        -:   99:
        -:  100:				case adventurer:
        1:  101:					printf("\tgetCost() = %d, expected %d\n", price, 6);
call    0 returned 100%
        1:  102:					assert(price == 6);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  103:					break;
        -:  104:
        -:  105:				case council_room:
        1:  106:					printf("\tgetCost() = %d, expected %d\n", price, 5);
call    0 returned 100%
        1:  107:					assert(price == 5);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  108:					break;
        -:  109:
        -:  110:				case feast:
        1:  111:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  112:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  113:					break;
        -:  114:
        -:  115:				case gardens:
        1:  116:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  117:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  118:					break;
        -:  119:
        -:  120:				case mine:
        1:  121:					printf("\tgetCost() = %d, expected %d\n", price, 5);
call    0 returned 100%
        1:  122:					assert(price == 5);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  123:					break;
        -:  124:
        -:  125:				case remodel:
        1:  126:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  127:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  128:					break;
        -:  129:
        -:  130:				case smithy:
        1:  131:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  132:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  133:					break;
        -:  134:
        -:  135:				case village:
        1:  136:					printf("\tgetCost() = %d, expected %d\n", price, 3);
call    0 returned 100%
        1:  137:					assert(price == 3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  138:					break;
        -:  139:
        -:  140:				case baron:
        1:  141:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  142:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  143:					break;
        -:  144:
        -:  145:				case great_hall:
        1:  146:					printf("\tgetCost() = %d, expected %d\n", price, 3);
call    0 returned 100%
        1:  147:					assert(price == 3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  148:					break;
        -:  149:
        -:  150:				case minion:
        1:  151:					printf("\tgetCost() = %d, expected %d\n", price, 5);
call    0 returned 100%
        1:  152:					assert(price == 5);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  153:					break;
        -:  154:
        -:  155:				case steward:
        1:  156:					printf("\tgetCost() = %d, expected %d\n", price, 3);
call    0 returned 100%
        1:  157:					assert(price == 3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  158:					break;
        -:  159:
        -:  160:				case tribute:
        1:  161:					printf("\tgetCost() = %d, expected %d\n", price, 5);
call    0 returned 100%
        1:  162:					assert(price == 5);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  163:					break;
        -:  164:
        -:  165:				case ambassador:
        1:  166:					printf("\tgetCost() = %d, expected %d\n", price, 3);
call    0 returned 100%
        1:  167:					assert(price == 3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  168:					break;
        -:  169:
        -:  170:				case cutpurse:
        1:  171:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  172:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  173:					break;
        -:  174:
        -:  175:				case embargo:
        1:  176:					printf("\tgetCost() = %d, expected %d\n", price, 2);
call    0 returned 100%
        1:  177:					assert(price == 2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  178:					break;
        -:  179:
        -:  180:				case outpost:
        1:  181:					printf("\tgetCost() = %d, expected %d\n", price, 5);
call    0 returned 100%
        1:  182:					assert(price == 5);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  183:					break;
        -:  184:
        -:  185:				case salvager:
        1:  186:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  187:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  188:					break;
        -:  189:
        -:  190:				case sea_hag:
        1:  191:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  192:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  193:					break;
        -:  194:
        -:  195:				case treasure_map:
        1:  196:					printf("\tgetCost() = %d, expected %d\n", price, 4);
call    0 returned 100%
        1:  197:					assert(price == 4);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  198:					break;
        -:  199:			}
        -:  200:			
        -:  201:		}
        -:  202:	#endif
        -:  203:
        1:  204:		printf("\n>>>>>>  Testing of getCost() complete. All tests passed! <<<<<<<\n\n");
call    0 returned 100%
        -:  205:
        1:  206:		return 0;
        -:  207:}
