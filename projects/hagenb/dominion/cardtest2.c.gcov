        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***************************************************************************************
        -:    2:** Author: Brook Hagen
        -:    3:** Date: 10/22/17
        -:    4:** Course: CS362 SEII
        -:    5:** Description: card test #2 for Assignment #3
        -:    6:**	gardendsCard() 
        -:    7:
        -:    8:**	Include the following in your makefile:
        -:    9:**	
        -:   10:**	cardtest2: cardtest2.c dominion.o rngs.o
        -:   11:**		gcc -o cardtest2 -g cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:   12:***************************************************************************************/
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include <string.h>
        -:   17:#include <stdio.h>
        -:   18:#include <assert.h>
        -:   19:#include "rngs.h"
        -:   20:#include <stdlib.h>
        -:   21:
        -:   22:#define TESTCARD "gardens"
        -:   23:
function pass called 1 returned 100% blocks executed 75%
        1:   24:void pass(int actual, int result)
        -:   25:{
        1:   26:	if (actual == result)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   27:	{
        1:   28:		printf("PASS\n");
call    0 returned 100%
        -:   29:	}
        -:   30:	else
    #####:   31:		printf("FAIL\n");
call    0 never executed
        1:   32:}
        -:   33:
function main called 1 returned 100% blocks executed 90%
        1:   34:int main() 
        -:   35:{
        1:   36:	int seed = 500;
        -:   37:	int val;
        1:   38:	int numPlayers = 2;
        1:   39:	int thisPlayer = 0;
        1:   40:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   41:	struct gameState G, testG;
        1:   42:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   43:			sea_hag, tribute, smithy, council_room};
        -:   44:	// initialize a game state and player cards
        1:   45:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   46:
        1:   47:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   48:
        1:   49:	printf("\nTest: calling gardensCard will return -1.\n");
call    0 returned 100%
        -:   50:
        -:   51:	// copy the game state to a test case
        1:   52:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   53:
        -:   54:	//call cardEffect, so that this will work whether function is separated out or not
        1:   55:	val = cardEffect(gardens, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:   56:
        1:   57:	printf("\tgardensCard() return value = %d, expected = %d\n\n", val, -1);
call    0 returned 100%
        1:   58:	pass(val, -1);
call    0 returned 100%
        -:   59:
        1:   60:	assert(val == -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   61:
        1:   62:	return 0;
        -:   63:}
