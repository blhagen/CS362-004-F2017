        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***************************************************************************************
        -:    2:** Author: Brook Hagen
        -:    3:** Date: 10/22/17
        -:    4:** Course: CS362 SEII
        -:    5:** Description: card test #3 for Assignment #3
        -:    6:**	smithyCard(struct gameState *state, int currentPlayer, int handPos) 
        -:    7:
        -:    8:**	Include the following in your makefile:
        -:    9:**	
        -:   10:**	cardtest3: cardtest3.c dominion.o rngs.o
        -:   11:**		gcc -o cardtest3 -g cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:   12:***************************************************************************************/
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include <string.h>
        -:   17:#include <stdio.h>
        -:   18:#include <assert.h>
        -:   19:#include "rngs.h"
        -:   20:#include <stdlib.h>
        -:   21:
        -:   22:#define TESTCARD "smithy"
        -:   23:
function pass called 2 returned 100% blocks executed 100%
        2:   24:void pass(int actual, int result)
        -:   25:{
        2:   26:	if (actual == result)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   27:	{
        1:   28:		printf("PASS\n");
call    0 returned 100%
        -:   29:	}
        -:   30:	else
        1:   31:		printf("FAIL\n");
call    0 returned 100%
        2:   32:}
        -:   33:
function main called 1 returned 100% blocks executed 100%
        1:   34:int main() 
        -:   35:{
        -:   36:	//int i;			//counters
        1:   37:	int seed = 500;
        1:   38:	int numPlayers = 2;
        1:   39:	int thisPlayer = 0;
        1:   40:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   41:	struct gameState G, testG;
        1:   42:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   43:			sea_hag, tribute, smithy, council_room};
        -:   44:	// initialize a game state and player cards
        1:   45:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   46:
        1:   47:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   48:
        -:   49:	// ----------- TEST 1: verify that 3 cards were drawn --------------
        1:   50:	printf("\nTest #1: verify that three cards were drawn.\n");
call    0 returned 100%
        -:   51:
        -:   52:	// copy the game state to a test case
        1:   53:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   54:
        -:   55:	//call cardEffect, so that this will work whether function is separated out or not
        1:   56:	cardEffect(smithy, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:   57:
        1:   58:	printf("\tHandCount for this player: %d\n", testG.handCount[thisPlayer]+1);
call    0 returned 100%
        1:   59:	printf("\tCards drawn = %d, expected = %d\t", testG.handCount[thisPlayer]+1 - 5, 3);
call    0 returned 100%
        1:   60:	pass(testG.handCount[thisPlayer]+1 - 5, 3);
call    0 returned 100%
        -:   61:	
        -:   62:
        -:   63:	// ----------- TEST 2: verify that card at handPos is discarded --------------
        1:   64:	printf("\nTest #2: calling smithy() will trigger the discardCard() function.\n");
call    0 returned 100%
        -:   65:
        -:   66:	// copy the game state to a test case
        1:   67:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   68:
        -:   69:	//call cardEffect, so that this will work whether function is separated out or not
        1:   70:	cardEffect(smithy, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:   71:	
        1:   72:	printf("\tThe card at the last handPos (8) should be discarded, ie, == -1\n");
call    0 returned 100%
        1:   73:	printf("\tCard at handPos %d = %d, expected = %d\t", handPos, testG.hand[thisPlayer][8], -1);
call    0 returned 100%
        1:   74:	pass(testG.hand[thisPlayer][8], -1);
call    0 returned 100%
        -:   75:
       10:   76:	for (handPos = 0; handPos <= testG.handCount[thisPlayer]; handPos++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:   77:	{
        9:   78:		printf("\t\tCard at position %d is ID %d\n", handPos, testG.hand[thisPlayer][handPos]);
call    0 returned 100%
        -:   79:	}
        -:   80:
        1:   81:	printf("\n\n");
call    0 returned 100%
        -:   82:
        -:   83:
        -:   84:	
        -:   85:
        1:   86:	return 0;
        -:   87:}
