        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***************************************************************************************
        -:    2:** Author: Brook Hagen
        -:    3:** Date: 11/05/17
        -:    4:** Course: CS362 SEII
        -:    5:** Description: random test #1 for Assignment #4
        -:    6:**	outpostCard (struct gameState *state, int currentPlayer, int handPos) 
        -:    7:
        -:    8:**	Include the following in your makefile:
        -:    9:**	
        -:   10:**	randomtest1: randomtest1.c dominion.o rngs.o
        -:   11:**		gcc -o randomtest1 -g randomtest1.c dominion.o rngs.o $(CFLAGS)
        -:   12:***************************************************************************************/
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include <string.h>
        -:   17:#include <assert.h>
        -:   18:#include "rngs.h"
        -:   19:#include <stdio.h>
        -:   20:#include <stdlib.h>
        -:   21:#include <time.h>
        -:   22:
        -:   23:#define TESTCARD "outpost"
        -:   24:
        -:   25:
function pass called 10 returned 100% blocks executed 75%
       10:   26:void pass(int actual, int result)
        -:   27:{
       10:   28:	if (actual == result)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   29:	{
    #####:   30:		printf("PASS\n");
call    0 never executed
        -:   31:	}
        -:   32:	else
       10:   33:		printf("FAIL\n");
call    0 returned 100%
       10:   34:}
        -:   35:
        -:   36:/************************************************************************************
        -:   37:  Function: getNumPlayers
        -:   38:  Parameters: none
        -:   39:  Returns: int n, the number of players for the game
        -:   40:  Description:
        -:   41:  Calling the getNumPlayers() function will select the number of players for the
        -:   42:  game, at random, between 2 and 4.
        -:   43:************************************************************************************/
function getNumPlayers called 100011 returned 100% blocks executed 100%
   100011:   44:int getNumPlayers()
        -:   45:{
        -:   46:	//randomly produce number of players between 2 and 4
   100011:   47:	int n = (rand() % 3) + 2;
call    0 returned 100%
   100011:   48:	return n;
        -:   49:}
        -:   50:
        -:   51:/************************************************************************************
        -:   52:  Function: getSeed
        -:   53:  Parameters: none
        -:   54:  Returns: int s
        -:   55:  Description:
        -:   56:  Calling the getSeed() function will select a random number between 1 and 5000,
        -:   57:  which will be the seed number for the initializeGame() function.
        -:   58:************************************************************************************/
function getSeed called 100011 returned 100% blocks executed 100%
   100011:   59:int getSeed()
        -:   60:{
        -:   61:	//randomly produce seed number between 1 and 5000.
   100011:   62:	int s = rand() % 5001;
call    0 returned 100%
   100011:   63:	return s;
        -:   64:}
        -:   65:
        -:   66:/************************************************************************************
        -:   67:  Function: getThisPlayer(int numPlayer)
        -:   68:  Parameters: int number of players
        -:   69:  Returns: int p - the player of concern (thisPlayer)
        -:   70:  Description:
        -:   71:  Calling the getThisPlayer() function will select a random player from the current,
        -:   72:  number of players, which will be used to verify the discard function.
        -:   73:************************************************************************************/
function getThisPlayer called 100011 returned 100% blocks executed 100%
   100011:   74:int getThisPlayer(int n)
        -:   75:{
        -:   76:	//randomly select player based on number of players
   100011:   77:	int p = (rand() % n);
call    0 returned 100%
   100011:   78:	return p;
        -:   79:}
        -:   80:
        -:   81:/************************************************************************************
        -:   82:  Function: getHandPos
        -:   83:  Parameters: none
        -:   84:  Returns: int h
        -:   85:  Description:
        -:   86:  Calling the getHandPos() function will select a random number between 0 and 4,
        -:   87:  which will represent the hand position of a particular card. Note that a hand has
        -:   88:  between 1 and 5 cards at positions 0 - 4.
        -:   89:************************************************************************************/
function getHandPos called 100010 returned 100% blocks executed 100%
   100010:   90:int getHandPos()
        -:   91:{
        -:   92:	//randomly produce seed number between 0 and 10.
   100010:   93:	int h = rand() % 5;
call    0 returned 100%
   100010:   94:	return h;
        -:   95:}
        -:   96:
        -:   97:/************************************************************************************
        -:   98:  Function: getBonus
        -:   99:  Parameters: none
        -:  100:  Returns: int b
        -:  101:  Description:
        -:  102:  Calling the getBonus() function will select a random number between 0 and 10,
        -:  103:  which will represent coin bonus.
        -:  104:************************************************************************************/
function getBonus called 100010 returned 100% blocks executed 100%
   100010:  105:int getBonus()
        -:  106:{
        -:  107:	//randomly produce seed number between 0 and 10.
   100010:  108:	int b = rand() % 11;
call    0 returned 100%
   100010:  109:	return b;
        -:  110:}
        -:  111:
function main called 1 returned 100% blocks executed 96%
        1:  112:int main() 
        -:  113:{
        -:  114:	//seed the random number generator
        1:  115:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:  116:	int i, j;					//counters
        -:  117:	int seed;		//random seed between 1 and 5000
        1:  118:	int num_tests = 10; //10000;			//run the test 10,000 times
        -:  119:	int numPlayers;
        -:  120:	int thisPlayer;
        1:  121:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus;
        -:  122:	struct gameState G, testG;
        1:  123:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:  124:			sea_hag, tribute, smithy, council_room};
        -:  125:	
        -:  126:	// initialize a game state and player cards
        1:  127:	numPlayers = getNumPlayers();
call    0 returned 100%
        1:  128:	seed = getSeed();
call    0 returned 100%
        1:  129:	thisPlayer = getThisPlayer(numPlayers);
call    0 returned 100%
        1:  130:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:  131:
        -:  132:	//time the tests
        -:  133:	clock_t t1, t2, totalT;
        -:  134:
        1:  135:	printf("----------------- Random Test for Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:  136:
        -:  137:	//start timers for test 1 and both tests together
        1:  138:	t1 = clock();
call    0 returned 100%
        1:  139:	totalT = clock();
call    0 returned 100%
        -:  140:
        -:  141:	//all the functions here are working
   100001:  142:	for (i = 0; i < (num_tests * 10000); i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  143:	{
        -:  144:
        -:  145:		// ----------- TEST 1: outpostPlayed flag is set --------------
   100000:  146:		if (i == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  147:			printf("\nTest #1: verify that state->outpostPlayed is incremented.\n");
call    0 returned 100%
        -:  148:
   100000:  149:		numPlayers = getNumPlayers();
call    0 returned 100%
   100000:  150:		seed = getSeed();
call    0 returned 100%
   100000:  151:		thisPlayer = getThisPlayer(numPlayers);
call    0 returned 100%
   100000:  152:		bonus = getBonus();
call    0 returned 100%
   100000:  153:		handPos = getHandPos();
call    0 returned 100%
        -:  154:		
        -:  155:		// copy the game state to a test case
   100000:  156:		memcpy(&testG, &G, sizeof(struct gameState));
        -:  157:
        -:  158:		//call cardEffect, so that this will work whether function is separated out or not
   100000:  159:		cardEffect(outpost, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:  160:
        -:  161:		// if the outpost card was not played, print a failure statement
   100000:  162:		if (testG.outpostPlayed != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  163:		{
    #####:  164:			printf("Test 1: iteration %d FAILED: \n", i);
call    0 never executed
    #####:  165:			printf("\toutpost Played = %d, expected = %d\t", testG.outpostPlayed, 1);
call    0 never executed
        -:  166:		}
        -:  167:
        -:  168:		//printf("Number of players is %d, seed is %d, thisPlayer is %d, bonus is %d\n", numPlayers, seed, thisPlayer, bonus);
        -:  169:		
        -:  170:	}
        -:  171:	//get the execution time and print it:
        1:  172:	t1 = clock() - t1;
call    0 returned 100%
        1:  173:	double t1_taken = ((double)t1)/CLOCKS_PER_SEC; 	//Time in seconds
        1:  174:	printf("\n Test 1 time: %f.\n", t1_taken);
call    0 returned 100%
        -:  175:
        1:  176:	printf("\n\t>> Test #1 is COMPLETE. <<\n");
call    0 returned 100%
        -:  177:
        -:  178:	//start timer for test #2
        1:  179:	t2 = clock();
call    0 returned 100%
        -:  180:
       11:  181:	for (i = 0; i < num_tests; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  182:	{
        -:  183:		// ----------- TEST 2: card at handPos is discarded --------------
        -:  184:
       10:  185:		if (i == 0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        1:  186:			printf("\nTest #2: calling outpostCard() will trigger the discardCard() function.\n");
call    0 returned 100%
        -:  187:
       10:  188:		numPlayers = getNumPlayers();
call    0 returned 100%
       10:  189:		seed = getSeed();
call    0 returned 100%
       10:  190:		thisPlayer = getThisPlayer(numPlayers);
call    0 returned 100%
       10:  191:		bonus = getBonus();
call    0 returned 100%
       10:  192:		handPos = getHandPos();
call    0 returned 100%
        -:  193:
        -:  194:		// copy the game state to a test case
       10:  195:		memcpy(&testG, &G, sizeof(struct gameState));
        -:  196:
        -:  197:		//call cardEffect, so that this will work whether function is separated out or not
       10:  198:		cardEffect(outpost, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:  199:
        -:  200:		//outpostCard(&G, thisPlayer, handPos)
        -:  201:		//printf("\tThe card at the current handPos should be discarded, ie, == -1\n");
       10:  202:		printf("\tCard at handPos %d = %d, expected = %d\t", handPos, testG.hand[thisPlayer][handPos], -1);
call    0 returned 100%
       10:  203:		pass(testG.hand[thisPlayer][handPos], -1);
call    0 returned 100%
        -:  204:	}
        -:  205:	//get the execution time and print it:
        1:  206:	t2 = clock() - t2;
call    0 returned 100%
        1:  207:	double t2_taken = ((double)t2)/CLOCKS_PER_SEC; 	//Time in seconds
        1:  208:	printf("\n Test 2 time: %f.\n", t2_taken);
call    0 returned 100%
        -:  209:
        1:  210:	printf("\n\t >> Test #2 is COMPLETE. << \n");
call    0 returned 100%
        -:  211:
        -:  212:	//get the execution time and print it:
        1:  213:	totalT = clock() - totalT;
call    0 returned 100%
        1:  214:	double total_taken = ((double)totalT)/CLOCKS_PER_SEC; 	//Time in seconds
        1:  215:	printf("\n Total testing time: %f.\n", total_taken);
call    0 returned 100%
        -:  216:
        1:  217:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  218:
        -:  219:
        1:  220:	return 0;
        -:  221:}
